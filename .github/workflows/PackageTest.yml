name: Test Application

on:
  workflow_call:
  workflow_dispatch:
  push:

env:
  PYTHON_VERSION: 3.11

jobs:
  discover_apps:
    runs-on: ubuntu-latest
    name: Discover Applications

    outputs:
      matrix: ${{ steps.find_tests.outputs.matrix }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Find testable apps
        id: find_tests
        run: |
          # Find application directories containing a 'tests' subdirectory nd format the result as JSON
          test_dirs=$(find fig_tree/apps -type d -name "tests" -exec dirname {} \; | jq -R . | jq -s . | tr -d '\n')
          echo "matrix={\"app_name\":$test_dirs}" >> $GITHUB_OUTPUT

  unit_tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: [ discover_apps ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover_apps.outputs.matrix) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: poetry install --with tests

      - name: Test ${{ matrix.app_name }} app
        run: poetry run fig-tree-manage test --parallel auto ${{ matrix.app_name }}

  function_tests:
    runs-on: ubuntu-latest
    name: Function Tests
    needs: [ discover_apps ]

    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: firefox
            url: https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install webdriver
        run: |
          wget -O driver.tar.gz ${{ matrix.url }} 
          tar -xf driver.tar.gz
          mv geckodriver /usr/local/bin/geckodriver

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: poetry install --with tests

      - name: Test ${{ matrix.app_name }} app
        run: poetry run fig-tree-manage test --parallel auto fig_tree/tests

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [ discover_apps ]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: poetry install --with tests

      - name: Run system checks
        run: poetry run fig-tree-manage check --fail-level WARNING

      - name: Run migration checks
        run: poetry run fig-tree-manage makemigrations --check --no-input

  report-test-status:
    name: Report Test Status
    if: always()
    needs: [ unit_tests, function_tests, integration-tests ]
    runs-on: ubuntu-latest

    steps:
      - name: Check build status
        if: ${{ contains(needs.*.result, 'failure') }} || ${{ contains(needs.*.result, 'skipped') }} || ${{ contains(needs.*.result, 'cancelled') }}
        run: exit 1
