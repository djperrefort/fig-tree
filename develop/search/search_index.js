var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Fig-Tree Technical Documentation","text":"<p>Welcome to the Fig-Tree developer documentation. Here are some suggestions to help you get started:</p> <ul> <li>New contributors are encouraged to review the Developer Notes section.</li> <li>Technical details can be found as needed in the Technical References section.</li> <li>Changes and improvements to the documentation can be suggested by project contributors as a GitHub Issue.</li> </ul>"},{"location":"deployment_guide/configuration.html","title":"Configuration and Settings","text":"<p>Fig-Tree uses environmental variables to configure application settings. At a minimum, setting the <code>DEBUG=1</code> option is sufficient to launch a development instance. However, deployments in a formal production setting will require additional configuration.</p> <p>All settings are loaded dynamically at runtime and persist for the lifetime of the application. This means an application restart is required for new settings to take effect.</p> <p>Danger</p> <p>Settings should be selected carefully when deploying to a production environment. Improper configuration can lead to unexpected behavior and insecure deployments. Never enable the <code>DEBUG</code> option in production.</p>"},{"location":"deployment_guide/configuration.html#security-settings","title":"Security Settings","text":"<p>The values listed below directly affect application security and should be chosen with care. It is important to note the following security recommendations:</p> <ul> <li>The <code>SECRET_KEY</code> value should be a random, cryptographically secure value.</li> <li>The list of <code>ALLOWED_HOSTS</code> should be as restrictive as possible.</li> </ul> Variable Default Description <code>SECRET_KEY</code> <code>&lt;random&gt;</code> Secret value used for security-related tasks. <code>ALLOWED_HOSTS</code> <code>localhost 127.0.0.1</code> Space-delimited list of hostnames allowed to serve the running application. <p>Note</p> <p>Fig-Tree will automatically generate a secret key if one is not provided. This key will not persist between sessions, and any previously generated tokens will be invalidated. For this reason, setting an explicit secret key value is strongly recommended.</p>"},{"location":"deployment_guide/configuration.html#database-settings","title":"Database Settings","text":"<p>Fig-Tree supports multiple database backends, including SQLite and Postgres. In general, SQLite is only recommended for use in development settings or for small deployments. Postgres is the suggested database for use in production. Database connection settings are configured using the variables listed below.</p> Variable Default Description <code>DB_DRIVER</code> <code>sqlite3</code> Whether to use the <code>sqlite3</code> or <code>postgresql</code> database engine. <code>DB_NAME</code> <code>fig_tree</code> Name of the application database to use. <code>DB_USER</code> Username to use when authenticating against the database. <code>DB_PASSWORD</code> Password to use when authenticating against the database. <code>DB_HOST</code> <code>localhost</code> Host address of the database server. <code>DB_PORT</code> <code>5432</code> Port number to use when connecting to the database server."},{"location":"deployment_guide/configuration.html#file-hosting","title":"File Hosting","text":"<p>Like all web-based applications, Fig-Tree relies on static files to generate and style web content. When hosting static files from the same server as the deployed application, <code>STATIC_URL</code> is typically set to <code>static/</code>. When hosting static files from a separate location, <code>STATIC_URL</code> should be set to the URL of the static file server.</p> Variable Default Description <code>STATIC_URL</code> <code>static/</code> Base URL (including http protocol) of the static content server. <code>STATIC_ROOT</code> <code>$(pwd)/static_root</code> Local directory where static files are collected when running management commands."},{"location":"deployment_guide/configuration.html#development-settings","title":"Development Settings","text":"<p>The following settings are provided to assist in the development process and are only supported when <code>DEBUG</code> mode is enabled.</p> Variable Default Description <code>DEBUG</code> <code>0</code> Used to enable (<code>1</code>) or disable (<code>0</code>) debug mode. <code>EMAIL_FILE_PATH</code> <code>&lt;project root&gt;/email</code> Emails issued by the application are stored as files in the given directory instead of being sent."},{"location":"deployment_guide/docker.html","title":"Deployments with Docker","text":"<p>For instructions on deploying Fig-Tree against existing backend services (e.g., a database and static file host) or in debug mode see the Using Docker section. </p> <p>To deploy Fig-Tree in addition to any necessary supporting services, see the  Using Docker Compose section.</p>"},{"location":"deployment_guide/docker.html#using-docker","title":"Using Docker","text":"<p>Start by pulling the latest Fig-Tree image from the project container registry.</p> <pre><code>docker pull ghcr.io/djperrefort/fig-tree:latest\n</code></pre> <p>Next, create a <code>.env</code> file defining the desired application settings. The following example demonstrates settings for a remote postgres database.</p> <pre><code>DB_NAME=fig_tree\nDB_USER=my_user\nDB_PASSWORD=secure_secret\nDB_HOST=my.host.com\nDB_PORT=5432\n</code></pre> <p>Finally, launch the application using the standard django management commands:</p> <pre><code>docker run --env-file .env djperrefort/fig-tree migrate --noinput\ndocker run --env-file .env -p 8000:80 djperrefort/fig-tree uvicorn fig_tree.main.asgi:application --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"deployment_guide/docker.html#using-docker-compose","title":"Using Docker Compose","text":"<p>The following docker compose recipe includes all services necessary to deploy a full Fig-Tree instance.</p> <pre><code>version: '3.4'\n\nservices:\nnginx: # (1)!\nbuild: ./nginx\nvolumes:\n- static_app_data:/home/app/web/staticfiles # (2)!\nports:\n- \"80:80\"\ndepends_on:\n- web\n\nweb: # (3)!\nbuild: fig_tree\ncommand: |\nsh -c '\nfig-tree-manage collectstatic --noinput\nfig-tree-manage migrate --noinput\nuvicorn fig_tree.main.asgi:application --host 0.0.0.0 --port 8000'\nvolumes:\n- static_app_data:/app/fig_tree/static_root\nexpose:\n- 8000\nenv_file:\n- .web.env # (4)!\ndepends_on:\n- db\n\ndb: # (5)!\nimage: postgres:15\nvolumes:\n- postgres_data:/var/lib/postgresql/data/\nenv_file:\n- .db.env # (6)!\n\nvolumes:\npostgres_data:\nstatic_app_data: </code></pre> <ol> <li>The <code>nginx</code> service uses a custom Nginx image to serve static files.     SSL handling is left to the user and should be handled upstream.</li> <li>This volume is used to shared static files between the <code>web</code> and <code>nginx</code> services.</li> <li>This service launches a Fig-Tree application instance using the Unicorn ASGI web server.</li> <li>The <code>.web.env</code> file is used to define application settings for Fig-Tree.</li> <li>The <code>db</code> service deploys a Postgres database.</li> <li>The <code>.db.env</code> file is used to configure the Postgres database.    This will include some of the same values as <code>.web.env</code> (e.g., the database name, username, and password).</li> </ol> <p>For static file hosting, we use a custom image built using Nginx. We use the <code>nginx.conf</code> file to configure traffic routing. By default, all traffic is directed to the Fig-Tree application. Requests submitted to <code>/static/</code> are redirected to static files stored in the <code>static_app_data</code> volume mounted at <code>/home/app/web/staticfiles</code>.</p> Dockerfilenginx.conf <pre><code>FROM nginx:1.25\n\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY nginx.conf /etc/nginx/conf.d\n\nRUN mkdir -p /home/app/web/staticfiles\nWORKDIR /home/app/web\n</code></pre> <pre><code>upstream django_app {\nserver web:8000;\n}\n\nserver {\nlisten 80;\nlocation / {\nproxy_pass http://django_app;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header Host $host;\nproxy_redirect off;\n}\n\nlocation /static/ {\nalias /home/app/web/staticfiles/;\n}\n}\n</code></pre> <p>The following examples demonstrate environmental files used to configure the <code>web</code> and <code>db</code> services. Database credentials (database name, username, and password) must match between the two files. </p> .web.env.db.env <pre><code>SECRET_KEY=asdf\nDB_NAME=fig_tree\nDB_USER=fig_tree_app\nDB_PASSWORD=securepassword\nDB_HOST=db  # Maches the name of the docker database service\nDB_PORT=5432\n</code></pre> <pre><code>POSTGRES_DB=fig_tree\nPOSTGRES_USER=fig_tree_app\nPOSTGRES_PASSWORD=securepassword\n</code></pre>"},{"location":"developer_notes/building_docs.html","title":"Building Docs","text":"<p>Project documentation is built using the Mkdocs Material framework. For detailed instructions on Mkdocs, we point readers to the official documentation.</p>"},{"location":"developer_notes/building_docs.html#preliminary-setup","title":"Preliminary Setup","text":"<p>Building the documentation requires extra dependencies beyond what is required by the core application. These can be installed using the following command:</p> <pre><code>poetry install --with docs\n</code></pre>"},{"location":"developer_notes/building_docs.html#common-use-cases","title":"Common Use Cases","text":""},{"location":"developer_notes/building_docs.html#rendering-a-live-preview","title":"Rendering a Live Preview","text":"<p>The <code>serve</code> command will build and serve a live version of the documentation website on your local machine. The live preview will automatically reload to reflect most changes made to the documentation source files. However, some documentation is generated by pulling information directly from the application source code (e.g., source code docstring). These changes may not load automatically and may require a restart to render correctly.</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"developer_notes/building_docs.html#building-html-source","title":"Building HTML Source","text":"<p>The <code>build</code> command will compile the application source code and write the resulting HTML files to a local directory called <code>site</code>. Old build files are automatically removed before building a new version.</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"developer_notes/first_time_setup.html","title":"First-Time Setup","text":"<p>This page provides instructions for setting up a new Python development environment. In most cases, these steps only need to be performed once.</p>"},{"location":"developer_notes/first_time_setup.html#prerequisites","title":"Prerequisites","text":"<p>Please ensure the following utilities are pre-installed and properly configured on your system:</p> <ul> <li>Conda - for managing Python environments</li> <li>Poetry - for managing project dependencies</li> <li>Selenium WebDriver - optional, but required for locally running function tests</li> </ul> <p>Note</p> <p>While it is possible to install Poetry in a virtual environment, this can result in unexpected behavior. It is strongly recommended that developers install Poetry at the system level.</p>"},{"location":"developer_notes/first_time_setup.html#installing-dependencies","title":"Installing Dependencies","text":"<p>To avoid dependency conflicts with other projects, start by creating a new virtual environment:</p> <pre><code>conda create -y -n fig-tree python=3.11\nconda activate fig-tree\n</code></pre> <p>After activating the environment, install the necessary Python dependencies using Poetry. Developers will want to use the <code>--with</code> option to install optional dependencies for running tests and building documentation.</p> <pre><code>poetry install --with tests docs\n</code></pre> <p>The Django web framework provides a <code>manage.py</code> file for executing administrative tasks. For convenience, Fig-Tree exposes this utility as the <code>fig-tree-manage</code> command-line utility. If your installation was successful, running the utility will display a list of available subcommands.</p> <pre><code>fig-tree-manage\n</code></pre>"},{"location":"developer_notes/first_time_setup.html#running-management-commands","title":"Running Management Commands","text":"<p>Fig-Tree can be configured using any of the available application settings. Enabling debug mode allows developers to get up and running quickly by skipping most of the required configuration.</p> <pre><code>export DEBUG=1\n</code></pre> <p>Danger</p> <p>Never enable debug mode in a production setting. See Configuration and Settings for more details.</p> <p>When running in debug mode, Fig-Tree will automatically create a SQLite database. Before launching the application, apply the required database schema.</p> <pre><code>fig-tree-manage migrate\n</code></pre> <p>Once the database is ready, Fig-Tree can be launched via the management utility.</p> <pre><code>fig-tree-manage runserver  # Run the application\n</code></pre>"},{"location":"developer_notes/running_tests.html","title":"Running Tests","text":"<p>Fig-Tree is built as a collection of applications that work together to form a cohesive front-end interface. In addition to testing each application individually, Fig-Tree also includes tests for the overall rendered front-end.</p> <p>The entire test suite can be executed using the Fig-Tree management command listed below. Instructions for running subsets of tests are provided in later sections.</p> <pre><code>fig-tree-manage test\n</code></pre> <p>Note</p> <p>All testing commands in this document support the <code>--parallel auto</code> option to run tests in parallel. The <code>auto</code> feature will automatically run one test process for each available processor core.</p>"},{"location":"developer_notes/running_tests.html#unit-tests","title":"Unit Tests","text":"<p>Unit tests are used to verify behavior for discrete units of code (functions, methods, classes, etc.). These tests specifically target backend systems and utilities, and do not cover front end functionality.</p> <p>Each Fig-Tree application includes a dedicated set of unit tests located in the same directory as the parent application. Unit tests for one or more applications can be executed by specifying the application directory:</p> <pre><code># Execute unit tests for the signup app\nfig-tree-manage test fig_tree/apps/signup\n\n# Execute unit tests for the signup and authentication apps\nfig-tree-manage test fig_tree/apps/signup fig_tree/tests/authentication\n</code></pre> <p>Similarly, unit tests for all applications are executed running the following command:</p> <pre><code>fig-tree-manage test fig_tree/apps </code></pre>"},{"location":"developer_notes/running_tests.html#function-tests","title":"Function Tests","text":"<p>Function tests are used to evaluate the functionality of application front-ends. These tests use a web driver to interact with rendered web pages and monitor the resulting behavior. Tests in this category do not cover back end functionality.</p> <p>Function tests are stored in the <code>fig_tree/tests</code> directory. At first glance, the subdirectory structure is similar to that of the unit tests. However, instead of being organized to mimic the structure of individual applications, function tests are organized to reflect the structure of the rendered Fig-Tree website. The resulting test organization is similar, but not identical.</p> <p>The full set of function tests can be executed using the following command:</p> <pre><code>fig-tree-manage test fig_tree/tests </code></pre> <p>A specific set of function tests can be executed by specifying the test subdirectory:</p> <pre><code>fig-tree-manage test fig_tree/apps/signup fig_tree/tests/authentication </code></pre>"},{"location":"technical_references/asgi.html","title":"ASGI Support","text":"<p>Fig-Tree exclusively supports the ASGI standard and does not provide a WSGI entrypoint. In keeping with standard practice, the ASGI callable object is exposed as <code>main.asgi.application</code>.</p>"},{"location":"technical_references/asgi.html#fig_tree.main.asgi--what-is-asgi","title":"What is ASGI?","text":"<p>Server gateways provide a standardized interface between web servers and Python applications. The Asynchronous Server Gateway Interface (ASGI) is one such specification. Unlike the older Web Server Gateway Interface (WSGI), ASGI natively supports asynchronous operation.</p> <p>ASGI support is built directly into the Django framework used to build Fig-Tree.</p>"},{"location":"technical_references/overview.html","title":"Package Overview","text":"<p>Fig-Tree is Python based web application built using the Django web framework. At a high level, the application comprises the following core components:</p> <ol> <li>A <code>main</code> module used to define high level application settings.</li> <li>A suite of custom applications, each implementing a particular feature or functionality.</li> <li>A collection of templates and static files used to define the front end presentation layer.</li> </ol>"},{"location":"technical_references/primary_url_routing.html","title":"Primary URL Routing","text":"<p>The <code>main.urls</code> module defines the primary website URL configuration. The table below outlines routing patterns different URL endpoints. Further traffic routing is handled internally by each application to route specific URLs to individual pages.</p> URL Pattern Application Namespace <code>admin/</code> <code>apps.admin</code> <code>admin</code> <code>auth/</code> <code>apps.authentication</code> <code>auth</code> <code>api/</code> <code>apps.gen_rest_api</code> <code>gen_rest_api</code> <code>signup/</code> <code>apps.signup</code> <code>signup</code>"},{"location":"technical_references/site_applications/authentication/forms.html","title":"Forms","text":"<p>The <code>forms</code> module defines form classes used to define the structure, input fields, and validation rules for various data input forms. Server and client side form validation is handled by application views found in the <code>views</code> module.</p>"},{"location":"technical_references/site_applications/authentication/forms.html#fig_tree.apps.authentication.forms.AuthenticationForm","title":"<code>AuthenticationForm</code>","text":"<p>             Bases: <code>AuthenticationForm</code></p> <p>Extends the built-in form for authenticating users</p> Source code in <code>fig_tree/apps/authentication/forms.py</code> <pre><code>class AuthenticationForm(AuthForm):\n\"\"\"Extends the built-in form for authenticating users\"\"\"\n\n    remember_me = forms.BooleanField(required=False)\n</code></pre>"},{"location":"technical_references/site_applications/authentication/overview.html","title":"Overview","text":"<p>The <code>authentication</code> app is responsible for authenticating users with existing accounts. It handles user logins/logouts and password reset requests. It is not responsible for creating new user accounts.</p> <p>Application features include:</p> <ul> <li>Extended authentication functionality with useful features like \"remember me\" session cookies.</li> <li>A secure, token-based mechanism for users to reset forgotten or outdated passwords.</li> </ul>"},{"location":"technical_references/site_applications/authentication/overview.html#fig_tree.apps.authentication--installation","title":"Installation","text":"<p>Start by adding the application to the <code>installed_apps</code> list in the package settings:</p> <pre><code>INSTALLED_APPS = [\n   'apps.authentication',\n]\n</code></pre> <p>Next, register the application URLs in the package's primary URL configuration file:</p> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    path('auth/', include('apps.authentication.urls', namespace='auth')),\n]\n</code></pre> <p>Finally, configure the pakage settings for the login URL using the same namespace value:</p> <pre><code>LOGIN_URL = 'auth:login'\n</code></pre>"},{"location":"technical_references/site_applications/authentication/overview.html#fig_tree.apps.authentication--application-settings","title":"Application Settings","text":"<p>The <code>authentication</code> app supports a remember me option that will keep users logged in for a given duration. Users are remembered for seven days by default, but the length of this duration is configurable in the <code>setings.py</code> file:</p> <pre><code>from datetime import timedelta\n\nREMEMBER_ME_DURATION = timedelta(days=4)\n</code></pre>"},{"location":"technical_references/site_applications/authentication/urls.html","title":"Urls","text":"<p>The <code>urls</code> module maps URL endpoints to django views defined in the parent application. For root level URL routing, see the project level <code>urls</code> module. View objects can be found in the <code>views</code> module.</p>"},{"location":"technical_references/site_applications/authentication/urls.html#fig_tree.apps.authentication.urls--url-routing-configuration","title":"URL Routing Configuration","text":"URL Pattern View Class Registered Name <code>login/</code> <code>LoginView</code> <code>login</code> <code>logout/</code> <code>LogoutView</code> <code>logout</code> <code>password_reset/</code> <code>PasswordResetView</code> <code>password-reset</code> <code>password_reset/done/</code> <code>PasswordResetDoneView</code> <code>password-reset-done</code> <code>'reset/&lt;uidb64&gt;/&lt;token&gt;/</code> <code>PasswordResetConfirmView</code> <code>password-reset-confirm</code> <code>reset/done/</code> <code>PasswordResetCompleteView</code> <code>password-reset-complete</code>"},{"location":"technical_references/site_applications/authentication/views.html","title":"Views","text":"<p>The <code>views</code> module defines classes for rendering templates based on incoming HTTP requests. View classes are responsible for processing form/request data, interacting with database models/serializers, managing application business logic, and returning rendered HTTP responses.</p> <p>Whenever possible, generic base classes are used to implement common behavior for HTTP request handling.</p>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.LoginView","title":"<code>LoginView</code>","text":"<p>             Bases: <code>LoginView</code></p> <p>View for handling existing user authentication</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>class LoginView(views.LoginView):\n\"\"\"View for handling existing user authentication\"\"\"\n\n    template_name = 'authentication/login.html'\n    authentication_form = AuthenticationForm\n    redirect_authenticated_user = True\n\n    def form_valid(self, form):\n\"\"\"Security check complete. Log the user in.\"\"\"\n\n        login(self.request, form.get_user())\n        if form.cleaned_data['remember_me']:\n            duration = getattr(settings, 'REMEMBER_ME_DURATION', DEFAULT_REMEMBER_ME_DURATION)\n            self.request.session.set_expiry(duration)\n\n        else:\n            self.request.session.set_expiry(0)\n\n        return HttpResponseRedirect(self.get_success_url())\n</code></pre>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.LoginView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Security check complete. Log the user in.</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>def form_valid(self, form):\n\"\"\"Security check complete. Log the user in.\"\"\"\n\n    login(self.request, form.get_user())\n    if form.cleaned_data['remember_me']:\n        duration = getattr(settings, 'REMEMBER_ME_DURATION', DEFAULT_REMEMBER_ME_DURATION)\n        self.request.session.set_expiry(duration)\n\n    else:\n        self.request.session.set_expiry(0)\n\n    return HttpResponseRedirect(self.get_success_url())\n</code></pre>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.LogoutView","title":"<code>LogoutView</code>","text":"<p>             Bases: <code>LogoutView</code></p> <p>View for logging out users</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>class LogoutView(views.LogoutView):\n\"\"\"View for logging out users\"\"\"\n\n    template_name = 'authentication/logged_out.html'\n</code></pre>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.PasswordResetCompleteView","title":"<code>PasswordResetCompleteView</code>","text":"<p>             Bases: <code>PasswordResetCompleteView</code></p> <p>View for confirming a user's password has been reset</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>class PasswordResetCompleteView(views.PasswordResetCompleteView):\n\"\"\"View for confirming a user's password has been reset\"\"\"\n\n    template_name = 'authentication/password_reset_complete.html'\n</code></pre>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.PasswordResetConfirmView","title":"<code>PasswordResetConfirmView</code>","text":"<p>             Bases: <code>PasswordResetConfirmView</code></p> <p>View for resetting an existing user's password</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>class PasswordResetConfirmView(views.PasswordResetConfirmView):\n\"\"\"View for resetting an existing user's password\"\"\"\n\n    template_name = 'authentication/password_reset_confirm.html'\n    success_url = reverse_lazy('auth:password-reset-complete')\n</code></pre>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.PasswordResetDoneView","title":"<code>PasswordResetDoneView</code>","text":"<p>             Bases: <code>PasswordResetDoneView</code></p> <p>View for confirming that a reset password link has been sent via email</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>class PasswordResetDoneView(views.PasswordResetDoneView):\n\"\"\"View for confirming that a reset password link has been sent via email\"\"\"\n\n    template_name = 'authentication/password_reset_done.html'\n</code></pre>"},{"location":"technical_references/site_applications/authentication/views.html#fig_tree.apps.authentication.views.PasswordResetView","title":"<code>PasswordResetView</code>","text":"<p>             Bases: <code>PasswordResetView</code></p> <p>View for requesting a reset password link via email</p> Source code in <code>fig_tree/apps/authentication/views.py</code> <pre><code>class PasswordResetView(views.PasswordResetView):\n\"\"\"View for requesting a reset password link via email\"\"\"\n\n    template_name = 'authentication/password_reset_form.html'\n    email_template_name = 'authentication/password_reset_email.html'\n    success_url = reverse_lazy('auth:password-reset-done')\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html","title":"Models","text":"<p>The <code>models</code> module uses data classes to define and interact with the application database schema. Each model class reflects the schema for a distinct database table and provides a high-level API to query and interact with table data.</p>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Address","title":"<code>Address</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The physical location of a <code>Place</code></p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Address(BaseModel):\n\"\"\"The physical location of a ``Place``\"\"\"\n\n    line1 = models.TextField()\n    line2 = models.TextField(null=True)\n    long = models.IntegerField(null=True)\n    lat = models.IntegerField(null=True)\n    municipality = models.TextField(null=True)\n    country = models.TextField(null=True)\n    code = models.IntegerField(null=True)\n    date = models.DateField(null=True)\n\n    citations = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.BaseModel","title":"<code>BaseModel</code>","text":"<p>             Bases: <code>Model</code></p> <p>Abstract class for creating DB models with common columns</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class BaseModel(models.Model):\n\"\"\"Abstract class for creating DB models with common columns\"\"\"\n\n    class Meta:\n        abstract = True  # Tell django this model is an abstract base class\n\n    private = models.BooleanField(default=True)\n    modified = models.DateTimeField(auto_now=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Citation","title":"<code>Citation</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Reference object between database objects and <code>Source</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Citation(BaseModel):\n\"\"\"Reference object between database objects and ``Source`` records\"\"\"\n\n    class Confidence(IntegerChoices):\n\"\"\"The researcher's confidence level in the accuracy of the cited information\"\"\"\n\n        LOW = 0, _('low')\n        REGULAR = 1, _('regular')\n        HIGH = 2, _('high')\n\n    page_or_ref = models.TextField(null=True)\n    confidence = models.IntegerField(choices=Confidence.choices, default=1)\n\n    source = models.ForeignKey('Source', on_delete=models.CASCADE, null=True)\n    notes = models.ForeignKey('Note', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Citation.Confidence","title":"<code>Confidence</code>","text":"<p>             Bases: <code>IntegerChoices</code></p> <p>The researcher's confidence level in the accuracy of the cited information</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Confidence(IntegerChoices):\n\"\"\"The researcher's confidence level in the accuracy of the cited information\"\"\"\n\n    LOW = 0, _('low')\n    REGULAR = 1, _('regular')\n    HIGH = 2, _('high')\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Event","title":"<code>Event</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A single historical event</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Event(BaseModel):\n\"\"\"A single historical event\"\"\"\n\n    class DateType(IntegerChoices):\n\"\"\"Date type for the event\"\"\"\n\n        REGULAR = 0, _('regular')\n        BEFORE = 1, _('before')\n        AFTER = 2, _('after')\n        ABOUT = 3, _('about')\n        RANGE = 4, _('range')\n        SPAN = 5, _('span')\n\n    date_type = models.IntegerField(choices=DateType.choices, default='regular')\n    event_type = models.TextField()\n    year_start = models.IntegerField(null=True)\n    month_start = models.IntegerField(null=True)\n    day_start = models.IntegerField(null=True)\n    year_end = models.IntegerField(null=True)\n    month_end = models.IntegerField(null=True)\n    day_end = models.IntegerField(null=True)\n    description = models.TextField(null=True)\n\n    place = models.OneToOneField('Place', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n    notes = models.ForeignKey('Note', on_delete=models.CASCADE, null=True)\n    media = models.ForeignKey('Media', on_delete=models.CASCADE, null=True)\n    citations = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Event.DateType","title":"<code>DateType</code>","text":"<p>             Bases: <code>IntegerChoices</code></p> <p>Date type for the event</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class DateType(IntegerChoices):\n\"\"\"Date type for the event\"\"\"\n\n    REGULAR = 0, _('regular')\n    BEFORE = 1, _('before')\n    AFTER = 2, _('after')\n    ABOUT = 3, _('about')\n    RANGE = 4, _('range')\n    SPAN = 5, _('span')\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Family","title":"<code>Family</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A group of individuals forming a family unit</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Family(BaseModel):\n\"\"\"A group of individuals forming a family unit\"\"\"\n\n    # Relationships with genealogical meaning\n    parent1 = models.ForeignKey('Person', on_delete=models.CASCADE, related_name='family_parent1', null=True)\n    parent2 = models.ForeignKey('Person', on_delete=models.CASCADE, related_name='family_parent2', null=True)\n    children = models.ForeignKey('Person', on_delete=models.CASCADE, related_name='family_child', null=True)\n\n    # Generic relationships\n    events = models.ForeignKey('Event', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n    notes = models.ForeignKey('Note', on_delete=models.CASCADE, null=True)\n    media = models.ForeignKey('Media', on_delete=models.CASCADE, null=True)\n    citations = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Media","title":"<code>Media</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A media object</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Media(BaseModel):\n\"\"\"A media object\"\"\"\n\n    relative_path = models.FilePathField()\n    date = models.DateField(null=True)\n    description = models.TextField(null=True)\n\n    citations = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Name","title":"<code>Name</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The name of a single individual</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Name(BaseModel):\n\"\"\"The name of a single individual\"\"\"\n\n    given_name = models.TextField(null=True)\n    surname = models.TextField(null=True)\n    suffix = models.TextField(null=True)\n    prefix = models.TextField(null=True)\n    citation = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Note","title":"<code>Note</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A text note</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Note(BaseModel):\n\"\"\"A text note\"\"\"\n\n    text = models.TextField()\n\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Person","title":"<code>Person</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A single individual</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Person(BaseModel):\n\"\"\"A single individual\"\"\"\n\n    class Sex(IntegerChoices):\n        FEMALE = 0, _('female')\n        MALE = 1, _('male')\n        Other = 2, _('other')\n\n    sex = models.IntegerField(choices=Sex.choices, null=True)\n\n    # Relationships with genealogical meaning\n    primary_name = models.ForeignKey('Name', on_delete=models.CASCADE, related_name='persons_primary', null=True)\n    alternate_names = models.ForeignKey('Name', on_delete=models.CASCADE, related_name='persons_alternate', null=True)\n    nick_names = models.ForeignKey('Name', on_delete=models.CASCADE, related_name='person_nick', null=True)\n    death = models.OneToOneField('Event', on_delete=models.CASCADE, related_name='person_death', null=True)\n    birth = models.OneToOneField('Event', on_delete=models.CASCADE, related_name='person_birth', null=True)\n    families = models.ForeignKey('Family', on_delete=models.CASCADE, related_name='people', null=True)\n    parent_families = models.ForeignKey('Family', on_delete=models.CASCADE, related_name='people_parent', null=True)\n\n    # Generic relationships\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n    events = models.ForeignKey('Event', on_delete=models.CASCADE, null=True)\n    citations = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n    notes = models.ForeignKey('Note', on_delete=models.CASCADE, null=True)\n    media = models.ForeignKey('Media', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Place","title":"<code>Place</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A place in the world separate from any physical location</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Place(BaseModel):\n\"\"\"A place in the world separate from any physical location\"\"\"\n\n    name = models.TextField()\n    place_type = models.TextField(null=True)\n    enclosed_by = models.IntegerField(null=True)\n    latitude = models.CharField(max_length=10, null=True)\n    longitude = models.CharField(max_length=10, null=True)\n    code = models.IntegerField(null=True)\n    date = models.DateField(null=True)\n\n    address = models.ForeignKey('Address', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n    notes = models.ForeignKey('Note', on_delete=models.CASCADE, null=True)\n    media = models.ForeignKey('Media', on_delete=models.CASCADE, null=True)\n    citations = models.ForeignKey('Citation', on_delete=models.CASCADE, null=True)\n\n    @property\n    def encloses(self) -&gt; list[Place]:\n        return self.objects.filter(enclodes_by=self.id).all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Repository","title":"<code>Repository</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A repository that hosts multiple historical sources</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Repository(BaseModel):\n\"\"\"A repository that hosts multiple historical sources\"\"\"\n\n    type = models.TextField()\n    name = models.TextField()\n\n    address_list = models.ForeignKey('Address', on_delete=models.CASCADE, null=True)\n    urls = models.ForeignKey('URL', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Source","title":"<code>Source</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A historical source or piece of reference material</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Source(BaseModel):\n\"\"\"A historical source or piece of reference material\"\"\"\n\n    title = models.TextField()\n    author = models.TextField(null=True)\n    pubinfo = models.TextField(null=True)\n\n    notes = models.ForeignKey('Note', on_delete=models.CASCADE, null=True)\n    media = models.ForeignKey('Media', on_delete=models.CASCADE, null=True)\n    tags = models.ForeignKey('Tag', on_delete=models.CASCADE, null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.Tag","title":"<code>Tag</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Data label used to organize data into customizable categories</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class Tag(BaseModel):\n\"\"\"Data label used to organize data into customizable categories\"\"\"\n\n    name = models.TextField()\n    modified = models.DateTimeField(auto_now=True)\n    description = models.TextField(null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/models.html#fig_tree.apps.gen_rest_api.models.URL","title":"<code>URL</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>An online resource locator</p> Source code in <code>fig_tree/apps/gen_rest_api/models.py</code> <pre><code>class URL(BaseModel):\n\"\"\"An online resource locator\"\"\"\n\n    href = models.TextField()\n    name = models.TextField(null=True)\n    date = models.DateField(null=True)\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/overview.html","title":"Overview","text":"<p>The <code>data_api</code> application provides a comprehensive REST API for managing genealogical data. The API is designed to facilitate the creation, retrieval, updating, and deletion of genealogical data in a flexible manner.</p> <p>Application features include:</p> <ul> <li>REST endpoints for CRUD operations on genealogical records including persons, families, events, locations, and more.</li> <li>Support for query parameters and filters to search and retrieve specific genealogical records.</li> <li>Robust data validation when creating/updating records to ensure data integrity.</li> </ul>"},{"location":"technical_references/site_applications/gen_rest_api/overview.html#fig_tree.apps.gen_rest_api--installation","title":"Installation","text":"<p>Add the application to the <code>installed_apps</code> list in the package settings:</p> <pre><code>INSTALLED_APPS = [\n    'apps.gen_rest_api',\n]\n</code></pre> <p>Register application URLs in the package's primary URL configuration file:</p> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    path('api/', include('apps.gen_rest_api.urls', namespace='gen_rest_api')),\n]\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html","title":"Serializers","text":"<p>The <code>serializers</code> module handles serializing/deserializing database models and query sets. Each serializer class defines which fields are included in the serialized output and handles the conversion of data types to and from their serialized representations. Serializers also ensure data integrate by handling data validation tasks as required by the relevant business domain.</p>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.AddressSerializer","title":"<code>AddressSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Address</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class AddressSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Address`` database model\"\"\"\n\n    class Meta:\n        model = models.Address\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.CitationSerializer","title":"<code>CitationSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Citation</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class CitationSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Citation`` database model\"\"\"\n\n    class Meta:\n        model = models.Citation\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.EventSerializer","title":"<code>EventSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Event</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class EventSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Event`` database model\"\"\"\n\n    class Meta:\n        model = models.Event\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.FamilySerializer","title":"<code>FamilySerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Family</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class FamilySerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Family`` database model\"\"\"\n\n    class Meta:\n        model = models.Family\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.MediaSerializer","title":"<code>MediaSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Media</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class MediaSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Media`` database model\"\"\"\n\n    class Meta:\n        model = models.Media\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.NameSerializer","title":"<code>NameSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Name</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class NameSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Name`` database model\"\"\"\n\n    class Meta:\n        model = models.Name\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.NoteSerializer","title":"<code>NoteSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Note</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class NoteSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Note`` database model\"\"\"\n\n    class Meta:\n        model = models.Note\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.PersonSerializer","title":"<code>PersonSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Person</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class PersonSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Person`` database model\"\"\"\n\n    class Meta:\n        model = models.Person\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.PlaceSerializer","title":"<code>PlaceSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Place</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class PlaceSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Place`` database model\"\"\"\n\n    class Meta:\n        model = models.Place\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.RepositorySerializer","title":"<code>RepositorySerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Repository</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class RepositorySerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Repository`` database model\"\"\"\n\n    class Meta:\n        model = models.Repository\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.SourceSerializer","title":"<code>SourceSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Source</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class SourceSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Source`` database model\"\"\"\n\n    class Meta:\n        model = models.Source\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.TagSerializer","title":"<code>TagSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>Tag</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class TagSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``Tag`` database model\"\"\"\n\n    class Meta:\n        model = models.Tag\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/serializers.html#fig_tree.apps.gen_rest_api.serializers.URLSerializer","title":"<code>URLSerializer</code>","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Data serializer for the <code>URL</code> database model</p> Source code in <code>fig_tree/apps/gen_rest_api/serializers.py</code> <pre><code>class URLSerializer(serializers.ModelSerializer):\n\"\"\"Data serializer for the ``URL`` database model\"\"\"\n\n    class Meta:\n        model = models.URL\n        fields = '__all__'\n        depth = 1\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/urls.html","title":"Urls","text":"<p>The <code>urls</code> module maps URL endpoints to django views defined in the parent application. For root level URL routing, see the project level <code>urls</code> module. View objects can be found in the <code>views</code> module.</p>"},{"location":"technical_references/site_applications/gen_rest_api/urls.html#fig_tree.apps.gen_rest_api.urls--url-routing-configuration","title":"URL Routing Configuration","text":"URL View Name <code>address</code> <code>AddressListView</code> <code>address-list</code> <code>address/&lt;str:id&gt;</code> <code>AddressDetailView</code> <code>address-detail</code> <code>citation</code> <code>CitationListView</code> <code>citation-list</code> <code>citation/&lt;str:id&gt;</code> <code>CitationDetailView</code> <code>citation-detail</code> <code>event</code> <code>EventListView</code> <code>event-list</code> <code>event/&lt;str:id&gt;</code> <code>EventDetailView</code> <code>event-detail</code> <code>family</code> <code>FamilyListView</code> <code>family-list</code> <code>family/&lt;str:id&gt;</code> <code>FamilyDetailView</code> <code>family-detail</code> <code>media</code> <code>MediaListView</code> <code>media-list</code> <code>media/&lt;str:id&gt;</code> <code>MediaDetailView</code> <code>media-detail</code> <code>name</code> <code>NameListView</code> <code>name-list</code> <code>name/&lt;str:id&gt;</code> <code>NameDetailView</code> <code>name-detail</code> <code>note</code> <code>NoteListView</code> <code>note-list</code> <code>note/&lt;str:id&gt;</code> <code>NoteDetailView</code> <code>note-detail</code> <code>person</code> <code>PersonListView</code> <code>person-list</code> <code>person/&lt;str:id&gt;</code> <code>PersonDetailView</code> <code>person-detail</code> <code>place</code> <code>PlaceListView</code> <code>place-list</code> <code>place/&lt;str:id&gt;</code> <code>PlaceDetailView</code> <code>place-detail</code> <code>repository</code> <code>RepositoryListView</code> <code>repository-list</code> <code>repository/&lt;str:id&gt;</code> <code>RepositoryDetailView</code> <code>repository-detail</code> <code>source</code> <code>SourceListView</code> <code>source-list</code> <code>source/&lt;str:id&gt;</code> <code>SourceDetailView</code> <code>source-detail</code> <code>tag</code> <code>TagListView</code> <code>tag-list</code> <code>tag/&lt;str:id&gt;</code> <code>TagDetailView</code> <code>tag-detail</code> <code>url</code> <code>URLListView</code> <code>url-list</code> <code>url/&lt;str:id&gt;</code> <code>URLDetailView</code> <code>url-detail</code>"},{"location":"technical_references/site_applications/gen_rest_api/views.html","title":"Views","text":"<p>The <code>views</code> module defines classes for rendering templates based on incoming HTTP requests. View classes are responsible for processing form/request data, interacting with database models/serializers, managing application business logic, and returning rendered HTTP responses.</p> <p>Whenever possible, generic base classes are used to implement common behavior for HTTP request handling.</p>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.AddressDetailView","title":"<code>AddressDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Address</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class AddressDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Address`` record\"\"\"\n\n    serializer_class = serializers.AddressSerializer\n    queryset = models.Address.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.AddressListView","title":"<code>AddressListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Address</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class AddressListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Address`` records\"\"\"\n\n    serializer_class = serializers.AddressSerializer\n    queryset = models.Address.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.CitationDetailView","title":"<code>CitationDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Citation</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class CitationDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Citation`` record\"\"\"\n\n    serializer_class = serializers.CitationSerializer\n    queryset = models.Citation.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.CitationListView","title":"<code>CitationListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Citation</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class CitationListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Citation`` records\"\"\"\n\n    serializer_class = serializers.CitationSerializer\n    queryset = models.Citation.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.EventDetailView","title":"<code>EventDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Event</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class EventDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Event`` record\"\"\"\n\n    serializer_class = serializers.EventSerializer\n    queryset = models.Event.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.EventListView","title":"<code>EventListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Event</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class EventListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Event`` records\"\"\"\n\n    serializer_class = serializers.EventSerializer\n    queryset = models.Event.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.FamilyDetailView","title":"<code>FamilyDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Family</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class FamilyDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Family`` record\"\"\"\n\n    serializer_class = serializers.FamilySerializer\n    queryset = models.Family.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.FamilyListView","title":"<code>FamilyListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Family</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class FamilyListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Family`` records\"\"\"\n\n    serializer_class = serializers.FamilySerializer\n    queryset = models.Family.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.MediaDetailView","title":"<code>MediaDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Media</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class MediaDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Media`` record\"\"\"\n\n    serializer_class = serializers.MediaSerializer\n    queryset = models.Media.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.MediaListView","title":"<code>MediaListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Media</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class MediaListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Media`` records\"\"\"\n\n    serializer_class = serializers.MediaSerializer\n    queryset = models.Media.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.NameDetailView","title":"<code>NameDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Name</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class NameDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Name`` record\"\"\"\n\n    serializer_class = serializers.NameSerializer\n    queryset = models.Name.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.NameListView","title":"<code>NameListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Name</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class NameListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Name`` records\"\"\"\n\n    serializer_class = serializers.NameSerializer\n    queryset = models.Name.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.NoteDetailView","title":"<code>NoteDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Note</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class NoteDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Note`` record\"\"\"\n\n    serializer_class = serializers.NoteSerializer\n    queryset = models.Note.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.NoteListView","title":"<code>NoteListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Note</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class NoteListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Note`` records\"\"\"\n\n    serializer_class = serializers.NoteSerializer\n    queryset = models.Note.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.PersonDetailView","title":"<code>PersonDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Person</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class PersonDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Person`` record\"\"\"\n\n    serializer_class = serializers.PersonSerializer\n    queryset = models.Person.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.PersonListView","title":"<code>PersonListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Person</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class PersonListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Person`` records\"\"\"\n\n    serializer_class = serializers.PersonSerializer\n    queryset = models.Person.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.PlaceDetailView","title":"<code>PlaceDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Place</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class PlaceDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Place`` record\"\"\"\n\n    serializer_class = serializers.PlaceSerializer\n    queryset = models.Place.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.PlaceListView","title":"<code>PlaceListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Place</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class PlaceListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Place`` records\"\"\"\n\n    serializer_class = serializers.PlaceSerializer\n    queryset = models.Place.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.RepositoryDetailView","title":"<code>RepositoryDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Repository</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class RepositoryDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Repository`` record\"\"\"\n\n    serializer_class = serializers.RepositorySerializer\n    queryset = models.Repository.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.RepositoryListView","title":"<code>RepositoryListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Repository</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class RepositoryListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Repository`` records\"\"\"\n\n    serializer_class = serializers.RepositorySerializer\n    queryset = models.Repository.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.SourceDetailView","title":"<code>SourceDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Source</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class SourceDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Source`` record\"\"\"\n\n    serializer_class = serializers.SourceSerializer\n    queryset = models.Source.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.SourceListView","title":"<code>SourceListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Source</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class SourceListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Source`` records\"\"\"\n\n    serializer_class = serializers.SourceSerializer\n    queryset = models.Source.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.TagDetailView","title":"<code>TagDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>Tag</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class TagDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``Tag`` record\"\"\"\n\n    serializer_class = serializers.TagSerializer\n    queryset = models.Tag.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.TagListView","title":"<code>TagListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>Tag</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class TagListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``Tag`` records\"\"\"\n\n    serializer_class = serializers.TagSerializer\n    queryset = models.Tag.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.URLDetailView","title":"<code>URLDetailView</code>","text":"<p>             Bases: <code>RetrieveUpdateDestroyAPIView</code></p> <p>Read/write view for CRUD operations on a single <code>URL</code> record</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class URLDetailView(RetrieveUpdateDestroyAPIView):\n\"\"\"Read/write view for CRUD operations on a single ``URL`` record\"\"\"\n\n    serializer_class = serializers.URLSerializer\n    queryset = models.URL.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/gen_rest_api/views.html#fig_tree.apps.gen_rest_api.views.URLListView","title":"<code>URLListView</code>","text":"<p>             Bases: <code>ListAPIView</code></p> <p>Read-only view for fetching multiple <code>URL</code> records</p> Source code in <code>fig_tree/apps/gen_rest_api/views.py</code> <pre><code>class URLListView(ListAPIView):\n\"\"\"Read-only view for fetching multiple ``URL`` records\"\"\"\n\n    serializer_class = serializers.URLSerializer\n    queryset = models.URL.objects.all()\n</code></pre>"},{"location":"technical_references/site_applications/signup/admin.html","title":"Admin","text":"<p>The <code>admin</code> module defines custom administrative interfaces used by the website admin portal. Admin classes are used to extend and enhance the management of application settings by customizing the appearance, functionality, and permissions of admin portal interfaces.</p>"},{"location":"technical_references/site_applications/signup/admin.html#fig_tree.apps.signup.admin.AuthenticatedUserAdmin","title":"<code>AuthenticatedUserAdmin</code>","text":"<p>             Bases: <code>UserAdmin</code></p> <p>Admin interface for managing user accounts</p> Source code in <code>fig_tree/apps/signup/admin.py</code> <pre><code>class AuthenticatedUserAdmin(UserAdmin):\n\"\"\"Admin interface for managing user accounts\"\"\"\n\n    add_form = UserCreationForm\n    form = UserChangeForm\n    model = AuthUser\n\n    # Fields shown in the main admin summary page\n    list_display = ('username', 'email')\n\n    # Fields shown when editing a new user\n    fieldsets = (\n        ('User Data', {'fields': list_display}),\n        ('Staff Status', {'fields': ('is_staff', 'is_super_user')}),\n    )\n\n    search_fields = ('username', 'email')\n    ordering = ('username',)\n</code></pre>"},{"location":"technical_references/site_applications/signup/forms.html","title":"Forms","text":"<p>The <code>forms</code> module defines form classes used to define the structure, input fields, and validation rules for various data input forms. Server and client side form validation is handled by application views found in the <code>views</code> module.</p>"},{"location":"technical_references/site_applications/signup/forms.html#fig_tree.apps.signup.forms.UserChangeForm","title":"<code>UserChangeForm</code>","text":"<p>             Bases: <code>UserChangeForm</code></p> <p>Form for modifying existing user data</p> Source code in <code>fig_tree/apps/signup/forms.py</code> <pre><code>class UserChangeForm(forms.UserChangeForm):\n\"\"\"Form for modifying existing user data\"\"\"\n\n    class Meta:\n        model = AuthUser\n        fields = _user_fields\n        field_classes = _user_field_classes\n</code></pre>"},{"location":"technical_references/site_applications/signup/forms.html#fig_tree.apps.signup.forms.UserCreationForm","title":"<code>UserCreationForm</code>","text":"<p>             Bases: <code>UserCreationForm</code></p> <p>Form for creating a new user account</p> Source code in <code>fig_tree/apps/signup/forms.py</code> <pre><code>class UserCreationForm(forms.UserCreationForm):\n\"\"\"Form for creating a new user account\"\"\"\n\n    class Meta(forms.UserCreationForm.Meta):\n        model = AuthUser\n        fields = _user_fields\n        field_classes = _user_field_classes\n</code></pre>"},{"location":"technical_references/site_applications/signup/managers.html","title":"Managers","text":"<p>The <code>managers</code> module defines custom model managers for encapsulating common query logic. Managers are attached to database models to extend a model's default querying capabilities and to facilitate common data retrieval tasks.</p> <p>Model objects can be found in the <code>models</code> module.</p>"},{"location":"technical_references/site_applications/signup/managers.html#fig_tree.apps.signup.managers.AuthUserManager","title":"<code>AuthUserManager</code>","text":"<p>             Bases: <code>BaseUserManager</code></p> <p>Custom user model manager</p> <p>Regular user accounts are set to an inactive state by default. This is the opposite of staff and superuser accounts, which default to being active.</p> Source code in <code>fig_tree/apps/signup/managers.py</code> <pre><code>class AuthUserManager(BaseUserManager):\n\"\"\"Custom user model manager\n\n    Regular user accounts are set to an inactive state by default. This is the\n    opposite of staff and superuser accounts, which default to being active.\n    \"\"\"\n\n    @staticmethod\n    def create_user(username: str, password: str, email: str, **extra_fields) -&gt; AuthUser:\n\"\"\"Create and save a new user with the given email and password\"\"\"\n\n        validate_email(email)\n\n        user_model = get_user_model()\n        user = user_model(username=username, email=email, **extra_fields)\n        user.set_password(password)\n        user.save()\n        return user\n\n    @classmethod\n    def create_staff_user(cls, username: str, password: str, email: str, **extra_fields) -&gt; AuthUser:\n\"\"\"Convenience function for creating a new staff user\"\"\"\n\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', False)\n        extra_fields.setdefault('is_active', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError('Superuser must have ``is_staff`` set to ``True```.')\n\n        return cls.create_user(username, password, email, **extra_fields)\n\n    @classmethod\n    def create_superuser(cls, username: str, password: str, email: str, **extra_fields) -&gt; AuthUser:\n\"\"\"Convenience function for creating a new superuser\"\"\"\n\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n        extra_fields.setdefault('is_active', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError('Superuser must have ``is_staff`` set to ``True```.')\n\n        if extra_fields.get('is_superuser') is not True:\n            raise ValueError('Superuser must have ``is_superuser`` set to ``True``.')\n\n        return cls.create_user(username, password, email, **extra_fields)\n</code></pre>"},{"location":"technical_references/site_applications/signup/managers.html#fig_tree.apps.signup.managers.AuthUserManager.create_staff_user","title":"<code>create_staff_user(username, password, email, **extra_fields)</code>  <code>classmethod</code>","text":"<p>Convenience function for creating a new staff user</p> Source code in <code>fig_tree/apps/signup/managers.py</code> <pre><code>@classmethod\ndef create_staff_user(cls, username: str, password: str, email: str, **extra_fields) -&gt; AuthUser:\n\"\"\"Convenience function for creating a new staff user\"\"\"\n\n    extra_fields.setdefault('is_staff', True)\n    extra_fields.setdefault('is_superuser', False)\n    extra_fields.setdefault('is_active', True)\n\n    if extra_fields.get('is_staff') is not True:\n        raise ValueError('Superuser must have ``is_staff`` set to ``True```.')\n\n    return cls.create_user(username, password, email, **extra_fields)\n</code></pre>"},{"location":"technical_references/site_applications/signup/managers.html#fig_tree.apps.signup.managers.AuthUserManager.create_superuser","title":"<code>create_superuser(username, password, email, **extra_fields)</code>  <code>classmethod</code>","text":"<p>Convenience function for creating a new superuser</p> Source code in <code>fig_tree/apps/signup/managers.py</code> <pre><code>@classmethod\ndef create_superuser(cls, username: str, password: str, email: str, **extra_fields) -&gt; AuthUser:\n\"\"\"Convenience function for creating a new superuser\"\"\"\n\n    extra_fields.setdefault('is_staff', True)\n    extra_fields.setdefault('is_superuser', True)\n    extra_fields.setdefault('is_active', True)\n\n    if extra_fields.get('is_staff') is not True:\n        raise ValueError('Superuser must have ``is_staff`` set to ``True```.')\n\n    if extra_fields.get('is_superuser') is not True:\n        raise ValueError('Superuser must have ``is_superuser`` set to ``True``.')\n\n    return cls.create_user(username, password, email, **extra_fields)\n</code></pre>"},{"location":"technical_references/site_applications/signup/managers.html#fig_tree.apps.signup.managers.AuthUserManager.create_user","title":"<code>create_user(username, password, email, **extra_fields)</code>  <code>staticmethod</code>","text":"<p>Create and save a new user with the given email and password</p> Source code in <code>fig_tree/apps/signup/managers.py</code> <pre><code>@staticmethod\ndef create_user(username: str, password: str, email: str, **extra_fields) -&gt; AuthUser:\n\"\"\"Create and save a new user with the given email and password\"\"\"\n\n    validate_email(email)\n\n    user_model = get_user_model()\n    user = user_model(username=username, email=email, **extra_fields)\n    user.set_password(password)\n    user.save()\n    return user\n</code></pre>"},{"location":"technical_references/site_applications/signup/models.html","title":"Models","text":"<p>The <code>models</code> module uses data classes to define and interact with the application database schema. Each model class reflects the schema for a distinct database table and provides a high-level API to query and interact with table data.</p>"},{"location":"technical_references/site_applications/signup/models.html#fig_tree.apps.signup.models.AuthUser","title":"<code>AuthUser</code>","text":"<p>             Bases: <code>AbstractBaseUser</code>, <code>PermissionsMixin</code></p> <p>Custom model for user account data</p> Source code in <code>fig_tree/apps/signup/models.py</code> <pre><code>class AuthUser(AbstractBaseUser, PermissionsMixin):\n\"\"\"Custom model for user account data\"\"\"\n\n    USERNAME_FIELD = 'username'\n    EMAIL_FIELD = 'email'\n    REQUIRED_FIELDS = ['email', ]\n\n    username = models.CharField(max_length=50, unique=True, null=False)\n    email = models.EmailField(_('email address'), unique=True, null=False)\n    date_joined = models.DateTimeField(default=timezone.now, null=False)\n    is_active = models.BooleanField(default=False, null=False)\n    is_staff = models.BooleanField(default=False, null=False)\n    is_super_user = models.BooleanField(default=False, null=False)\n\n    objects = AuthUserManager()\n</code></pre>"},{"location":"technical_references/site_applications/signup/overview.html","title":"Overview","text":"<p>The <code>signup</code> application is responsible for the creation and verification of new user accounts.</p> <p>Application features include:</p> <ul> <li>Allows users to create new accounts using a unique username, email address, and password.</li> <li>An extended user database model with additional fields and functionality.</li> <li>User account management via customized administrative interfaces in the website admin portal.</li> <li>Account verification email confirmation requests.</li> </ul>"},{"location":"technical_references/site_applications/signup/overview.html#fig_tree.apps.signup--installation","title":"Installation","text":"<p>Add the application and it's required dependencies to the <code>installed_apps</code> list in the package settings:</p> <pre><code>INSTALLED_APPS = [\n    'django.contrib.sites',\n    'apps.signup',\n]\n</code></pre> <p>Register application URLs in the package's primary URL configuration file:</p> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    path('signup/', include('apps.signup.urls', namespace='signup')),\n]\n</code></pre> <p>Using the same namespace value as chosen in the previous step, override the default user model by adding the following definition to the package settings file:</p> <pre><code>AUTH_USER_MODEL = 'signup.AuthUser'\n</code></pre> <p>To make sure everything is integrated correctly, run the application test suite:</p> <pre><code>fig-tree-manage test apps.signup\n</code></pre>"},{"location":"technical_references/site_applications/signup/urls.html","title":"Urls","text":"<p>The <code>urls</code> module maps URL endpoints to django views defined in the parent application. For root level URL routing, see the project level <code>urls</code> module. View objects can be found in the <code>views</code> module.</p>"},{"location":"technical_references/site_applications/signup/urls.html#fig_tree.apps.signup.urls--url-routing-configuration","title":"URL Routing Configuration","text":"URL View Name <code>/</code> <code>SignUpView</code> <code>new-user</code> <code>act_sent/</code> <code>activation_sent_view</code> <code>activation-sent</code> <code>[AUTHENTICATION-TOKEN]</code> <code>ActivateAccountView</code> <code>activate</code>"},{"location":"technical_references/site_applications/signup/views.html","title":"Views","text":"<p>The <code>views</code> module defines classes for rendering templates based on incoming HTTP requests. View classes are responsible for processing form/request data, interacting with database models/serializers, managing application business logic, and returning rendered HTTP responses.</p> <p>Whenever possible, generic base classes are used to implement common behavior for HTTP request handling.</p>"},{"location":"technical_references/site_applications/signup/views.html#fig_tree.apps.signup.views.ActivateAccountView","title":"<code>ActivateAccountView</code>","text":"<p>             Bases: <code>View</code></p> <p>View for marking accounts as active and finalizing account creation</p> Source code in <code>fig_tree/apps/signup/views.py</code> <pre><code>class ActivateAccountView(View):\n\"\"\"View for marking accounts as active and finalizing account creation\"\"\"\n\n    def get(self, request: HttpRequest, uidb64: str, token: str) -&gt; HttpResponse:\n\"\"\"Handle an incoming HTTP request\n\n        Args:\n            request: Incoming HTTP request\n            uidb64: Base 64 encoded user id\n            token: Account authentication token\n\n        Return:\n            The outgoing HTTPResponse\n        \"\"\"\n\n        try:\n            uid = force_bytes(urlsafe_base64_decode(uidb64))\n            user = AuthUser.objects.get(id=uid)\n\n        # Catch all errors but explicitly list the expected ones\n        except(TypeError, ValueError, OverflowError, AuthUser.DoesNotExist, Exception):\n            user = None\n\n        if user is not None and activation_token_generator.check_token(user, token):\n            user.is_active = True\n            user.save()\n            return render(request, 'signup/activation_success.html')\n\n        return render(request, 'signup/invalid_activation_link.html')\n</code></pre>"},{"location":"technical_references/site_applications/signup/views.html#fig_tree.apps.signup.views.ActivateAccountView.get","title":"<code>get(request, uidb64, token)</code>","text":"<p>Handle an incoming HTTP request</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>Incoming HTTP request</p> required <code>uidb64</code> <code>str</code> <p>Base 64 encoded user id</p> required <code>token</code> <code>str</code> <p>Account authentication token</p> required Return <p>The outgoing HTTPResponse</p> Source code in <code>fig_tree/apps/signup/views.py</code> <pre><code>def get(self, request: HttpRequest, uidb64: str, token: str) -&gt; HttpResponse:\n\"\"\"Handle an incoming HTTP request\n\n    Args:\n        request: Incoming HTTP request\n        uidb64: Base 64 encoded user id\n        token: Account authentication token\n\n    Return:\n        The outgoing HTTPResponse\n    \"\"\"\n\n    try:\n        uid = force_bytes(urlsafe_base64_decode(uidb64))\n        user = AuthUser.objects.get(id=uid)\n\n    # Catch all errors but explicitly list the expected ones\n    except(TypeError, ValueError, OverflowError, AuthUser.DoesNotExist, Exception):\n        user = None\n\n    if user is not None and activation_token_generator.check_token(user, token):\n        user.is_active = True\n        user.save()\n        return render(request, 'signup/activation_success.html')\n\n    return render(request, 'signup/invalid_activation_link.html')\n</code></pre>"},{"location":"technical_references/site_applications/signup/views.html#fig_tree.apps.signup.views.ActivationSentView","title":"<code>ActivationSentView</code>","text":"<p>             Bases: <code>TemplateView</code></p> <p>View for telling user's to check hir email for a confirmation notice</p> Source code in <code>fig_tree/apps/signup/views.py</code> <pre><code>class ActivationSentView(TemplateView):\n\"\"\"View for telling user's to check hir email for a confirmation notice\"\"\"\n\n    template_name = \"signup/activation_sent.html\"\n</code></pre>"},{"location":"technical_references/site_applications/signup/views.html#fig_tree.apps.signup.views.SignUpView","title":"<code>SignUpView</code>","text":"<p>             Bases: <code>CreateView</code></p> <p>View for handling new user creation requests</p> Source code in <code>fig_tree/apps/signup/views.py</code> <pre><code>class SignUpView(CreateView):\n\"\"\"View for handling new user creation requests\"\"\"\n\n    form_class = UserCreationForm\n    template_name = 'signup/create_new_user.html'\n    success_url = reverse_lazy('signup:activation-sent')\n\n    def form_valid(self, form: UserCreationForm) -&gt; bool:\n\"\"\"Creates a new user account and sends an email confirming user contact information\n\n        This method is automatically called on POST requests after successfully\n        validating data submitted in the ``form_class`` form.\n\n        Args:\n            form: The form to validate\n\n        Return:\n            Whether the form is valid\n        \"\"\"\n\n        user = form.save(commit=False)\n        user.save()\n\n        current_site = Site.objects.get_current()\n\n        email_subject = 'New account activation'\n        message = render_to_string('signup/activate_account_email.html', {\n            'user': user,\n            'domain': current_site.domain,\n            'protocol': 'https',\n            'uid': urlsafe_base64_encode(force_bytes(user.id)),\n            'token': activation_token_generator.make_token(user)\n        })\n\n        email_address = form.cleaned_data.get('email')\n        EmailMessage(email_subject, message, to=[email_address]).send()\n\n        # The parent ``form_valid`` method redirects requests to ``self.success_url``\n        return super().form_valid(form)\n</code></pre>"},{"location":"technical_references/site_applications/signup/views.html#fig_tree.apps.signup.views.SignUpView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Creates a new user account and sends an email confirming user contact information</p> <p>This method is automatically called on POST requests after successfully validating data submitted in the <code>form_class</code> form.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>UserCreationForm</code> <p>The form to validate</p> required Return <p>Whether the form is valid</p> Source code in <code>fig_tree/apps/signup/views.py</code> <pre><code>def form_valid(self, form: UserCreationForm) -&gt; bool:\n\"\"\"Creates a new user account and sends an email confirming user contact information\n\n    This method is automatically called on POST requests after successfully\n    validating data submitted in the ``form_class`` form.\n\n    Args:\n        form: The form to validate\n\n    Return:\n        Whether the form is valid\n    \"\"\"\n\n    user = form.save(commit=False)\n    user.save()\n\n    current_site = Site.objects.get_current()\n\n    email_subject = 'New account activation'\n    message = render_to_string('signup/activate_account_email.html', {\n        'user': user,\n        'domain': current_site.domain,\n        'protocol': 'https',\n        'uid': urlsafe_base64_encode(force_bytes(user.id)),\n        'token': activation_token_generator.make_token(user)\n    })\n\n    email_address = form.cleaned_data.get('email')\n    EmailMessage(email_subject, message, to=[email_address]).send()\n\n    # The parent ``form_valid`` method redirects requests to ``self.success_url``\n    return super().form_valid(form)\n</code></pre>"}]}